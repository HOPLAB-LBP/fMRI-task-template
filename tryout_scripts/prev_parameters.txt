%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Parameters for a MATLAB script
% This file contains the parameters to be used in another matlab script.
% It will be parsed according to these rules:
% - all lines beginning with '%' will be ignored, use them to comment
% - all empty lines will be ignored
% - all other lines will be read as matlab code
% 
% Enter your parameters in this format: "name = value".
%
% Use quotation marks for strings, brackets for lists, etc. as you would in matlab.
% Give you strings arrays with curly brackets {'string1' 'string2'}
% Use spaces to separate your array elements, not commas
%
% Write whatever you want in this file. As long as it is preceded by a '%' sign at the beginning of the line, it won't be read by MatLab.
% Write all your parameters in uncommented lines, and they will be read as code.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



%% STIMULUS TIMING

% Stimulus duration - how long each stimulus is shown, in seconds
stimDur = 2.5

% Fixation duration - how long the fixation cross appears for, in seconds. This corresponds to the ISI and to the response window.
fixDur = 1

% Pre- and post-trial interval duration, in seconds.
prePost = 10

% Trial duration: calculated as the sum of the stimulus presentation and fixation cross presentation times.
trialDur = 3.5



%% TASK NAME

% Give a short name to your task. This will be used to record log files. Make it informative and one-word.

taskName = 'my_exp'



%% STIMULUS SIZE

% In this section, decide on whether your stimuli should be resized or not. If they already have the desired size, set the 'resize' parameter to 'false'. If your stimuli need resizing, then set it to 'true' and choose your resizing method.

resize = true

% If you set 'resize' to 'true', choose a resize mode below by declaring the variable 'resizeMode'.
% The possible resizing modes are: visualUnits, pixelSize. 
% Give your output size by specifying the 'outWidth' and/or 'outHeight' parameters. Giving only one of them will adaptively resize the other proportionately.
% For each mode, give two values: one for the width, one for the height of the resized image.
%  - visualUnits: convert your stimulus size from visual degrees to pixels. Give your input in degrees of visual angle.
%  - pixelSize: resize your image to the desired pixel size. Give your input in pixels.

% resizeMode = pixelSize
resizeMode = 'visualUnits'

outWidth = 8
% outHeight = 8



%% STIMULUS LOCATION & DESIGN LIST

% Declare how many runs you have

numRuns = 2

% Give the path to your trials stimulus list file here, where you made a sequential list of the stimuli you will present. This list can be partial or full (see Readme for full explanations).
% The stimulus list file should be a .tsv file, with its first column named 'stimuli'.
% - A full list has one line per trial for the whole experiment
% - A partial list only has trial for a part of the experiment, e.g. for one run

stimListFile = 'list_of_trials.tsv'

% Number of repetitions: declare how many times the stimuli in your stimulus list should be repeated. If you gave a full list, set this number to 1. If you gave a partial list, make sure to include as many repetitions necessary to fill in your experiment.

numRepetitions = 2


% Your trial list will be created based on the list of stimuli and number of repetitions you gave above. It will also be divided into runs based on the number of runs you declared.
% The order of your stimulus list is kept intact by default. Decide below if you want to randomise it or not, and how.
% - comment out 'stimRandomization' to keep the order intact;
% - set 'stimRandomization' to 'run' to randomise trials within run;
% - set 'stimRandomization' to 'all' to randomise trials across the whole experiment.

stimRandomisation = 'run'




%% FIXATION CROSS

% Declare the fixation cross size in visual degrees
fixSize = [.6 .5 .1]

% Declare the fixation cross color: each triplet corresponds to one element of the cross from center to periphery
% By default this is a black-white-black sequence
fixColOut = [0 0 0]
fixColMid = [255 255 255]
fixColIn = [0 0 0]




%% SCREEN SIZE AND COLOUR

% Declare the background colour you want for your screen. Give a single number for grayscale (e.g. 0 =  black) or an array of 3 numbers for RGB values (e.g. [200 0 0] = red)

% screenCol = [255 0 0]
screenCol = 0

% Declare the size of the window in which the debugging mode will be ran (non full screen)
debugWindow = [1920 1080]



%% INSTRUCTIONS & TEXT

% Declare the text size and font to use when displaying instructions on screen
textSize = 30
textFont = 'Helvetica'



% Write your instructions here sentence by sentence; try to keep it relatively short (3-4 lines).
% Use the place holder () to insert your response keys, those will be replaced by the actual response keys, in sequential order (left then right).
% Add instructions line if necessary by declaring some more instruction fields (instructionsText4, instructionsText5, â€¦)

instructionsText1 = 'On each trial judge whether you prefer the current or the previous image.'
instructionsText2 = 'Press () for the current image, or press () for the previous image.'
instructionsText3 = 'REMEMBER: keep your eyes on the fixation point!'
instructionsText4 = 'Press any button to begin!'

% Write a message to display while the script waits for the trigger
triggerWaitText = 'Experiment loading ...'




%% SCREEN DISTANCE

% Set up the screen distance (in mm) and screen width, at the scanner (MRI) and in debug mode (PC)
% The MRI values have distance of 630 and width of 340 at default. 
scrDistMRI = 630
scrWidthMRI = 340

% Decide on the PC values
scrDistPC = 520
scrWidthPC = 510




%% RESPONSE KEYS

% Define the response key codes at the scanner (MRI) and in debug mode (PC), as well as the trigger values to expect
% Keep the values below at default, except if you e.g. change buttons at the scanner
% Make sure you align the response keys with the response key instructions
% Based on the user defined fmriPC mode, either the MRI or the PC settings will be used.

% First give the keys to use at the scanner (most likely, leave these unchanged)

respKeyMRI = [51 52]
triggerKeyMRI = 53

% Then decide on the keyboard responses to give in debugging mode

respKeyPC = {'q' "w"}
triggerKeyPC = 'a'

% Give names to the response keys for instruction purposes
% Make sure the instructions response keys match the order of the actual given response keys
resKeyInstructions = {'left/green' 'right/red'}

% Declare an escape key to press to exit the task
escapeKey = 'ESCAPE'



